[{"section":"Team Structure","descriptor":"Build long-lived teams and bring the work to them","raw":"Team Structure Build long-lived teams and bring the work to them","number":-1,"entries":[{"score":-1,"descriptor":"Team has significantly unhealthy churn."},{"score":-1,"descriptor":"Communication is ineffective, for example reliance on email or other asynchronous forms of communication."},{"score":0,"descriptor":"Team has limited reliance on outside resources for day-to-day needs, and this is not causing a significant bottleneck for the team."},{"score":0,"descriptor":"Product owner is at least part time, 50% of time dedicated to team."},{"score":0,"descriptor":"Team has limited distractions outside of sprint goals."},{"score":0,"descriptor":"Team can deliver end to end features with business value."},{"score":1,"descriptor":"Team is cross-functional with skill set mix that is well-balanced to match the needs of the work."},{"score":1,"descriptor":"Team is dedicated to single value stream and does not multi-task outside of sprint goals."},{"score":1,"descriptor":"Product owner is dedicated to team and spends whatever time necessary for direct collaboration with team members."},{"score":2,"descriptor":"Team members are becoming T-shaped and can manage a variety of responsibilities as the work demands."},{"score":3,"descriptor":"Team members' skill sets are highly flexible - almost any team member can flex to take on any type of work."}]},{"section":"Team Workflow","descriptor":"Encourage collaboration through deliberate workflow design","raw":"Team Workflow Encourage collaboration through deliberate workflow design","number":-1,"entries":[{"score":-1,"descriptor":"Developers operate \"on an island\" and might not check in with others every day"},{"score":-1,"descriptor":"Developers work from written documents and do not communicate directly with PO or other teammates"},{"score":0,"descriptor":"Developers work in close digital proximity to each other"},{"score":0,"descriptor":"Team has standard tools for sharing in their workflow"},{"score":1,"descriptor":"Team has digital collaboration space dedicated to the team"},{"score":1,"descriptor":"Team has management support to acquire additional non-standard tools needed to be successful"},{"score":1,"descriptor":"Product Owner works closely with the rest of the team"},{"score":2,"descriptor":"Team has flexibility to schedule face-to-face video chats as needed"},{"score":2,"descriptor":"Other key stakeholders are available to the team"},{"score":2,"descriptor":"Team members are empowered to get time with those they need without regard to organizational hierarchy"},{"score":3,"descriptor":"TBD"}]},{"section":"Team Working Agreements","descriptor":"Build a strong team foundation by asking team members to agree upon and document their norms","raw":"Team Working Agreements Build a strong team foundation by asking team members to agree upon and document their norms","number":-1,"entries":[{"score":-1,"descriptor":"Chaos, no defined standards or processes have been formed."},{"score":0,"descriptor":"The team has some defined practices, which may include; definition of done, meeting rhythms, coding standards, story size guidelines and code management & integration practices."},{"score":1,"descriptor":"Everyone is aware of the practices."},{"score":1,"descriptor":"Everyone follows the practices consistently."},{"score":1,"descriptor":"Team has discussed and agreed on the practices they will follow. "},{"score":1,"descriptor":"If asked, all team members would describe this common set of practices consistently ."},{"score":1,"descriptor":"All team members generally respect and mostly follow the agreements."},{"score":2,"descriptor":"Working agreements are revisited periodically (such as during retrospectives) and refined over time as team evolves and improves. "},{"score":2,"descriptor":"The team generally self enforces the working agreements and does not rely on a scrum master or other single authority figure."},{"score":3,"descriptor":"Working agreements include elements that encourage innovation, cross-training, excellent collaboration, and growth for the team members."}]},{"section":"Cross Team Working Agreements","descriptor":"Formalize the processes teams use to manage cross team dependencies, decreasing cycle time","raw":"Cross Team Working Agreements Formalize the processes teams use to manage cross team dependencies, decreasing cycle time","number":-1,"entries":[{"score":-1,"descriptor":"Processes are decided and documented by what the performing team feels is required, i.e not collaboratively."},{"score":-1,"descriptor":"Ad-hoc and unplanned working agreements are in place around security scans, risk management, export control, cross team integration for full feature integration regarding release and deploy procedures."},{"score":0,"descriptor":"An attempt at collaboratively authoring working agreements has been made and they meet the needs of most parties."},{"score":0,"descriptor":"Scrum of scrums in place."},{"score":0,"descriptor":"Key dependencies between teams are mostly delivered on-time."},{"score":1,"descriptor":"Working agreements have been collaboratively authored, and they meet the needs of all concerned."},{"score":1,"descriptor":"Working agreements may be expressed as SLAs."},{"score":1,"descriptor":"When SLAs are not met, efforts are made to retrospect and identify cause."},{"score":1,"descriptor":"Inspection of unmet agreements result in continuous improvement changes."},{"score":2,"descriptor":"Teams work together to proactively find and address problems before they arise."},{"score":2,"descriptor":"Improvements are implemented that will break down the cross-team dependencies such as empowering teams to perform functions internally."},{"score":3,"descriptor":"Meritocracy is used among teams. "},{"score":3,"descriptor":"Self-organizing approaches to collaboration have emerged and are providing significant value to teams."}]},{"section":"Business Partner Working Agreements","descriptor":"Formalize the processes used to form a collaborative relationship between engineering and business","raw":"Business Partner Working Agreements Formalize the processes used to form a collaborative relationship between engineering and business","number":-1,"entries":[{"score":-1,"descriptor":"There are frequent misunderstandings around scope and schedule."},{"score":-1,"descriptor":"Business partners are not clear on their role or are not providing support needed to be successful. "},{"score":-1,"descriptor":"Poor transparency, inconsistent information as to real project status."},{"score":0,"descriptor":"There are realistic expectations as to how scope and schedule will be managed.  "},{"score":0,"descriptor":"Some agreement as to roles / responsibilities exists."},{"score":0,"descriptor":"Informal expectations or agreement on how the team should interact with the business or what the business should expect from the team exist."},{"score":0,"descriptor":"When the business adds new scope, realistic tradeoffs are made."},{"score":1,"descriptor":"Roles and expectations are clear and understood by all parties. "},{"score":1,"descriptor":"The project management approach is well-understood and agreed upon"},{"score":1,"descriptor":"Both parties are committed to transparency and reality-based management and agree adjustments to scope and timeline will be negotiated as risks emerge. "},{"score":1,"descriptor":"The backlog is the only mechanism by which scope is managed."},{"score":2,"descriptor":"The business partner has taken steps to revise their governance (which may be a tollgate process) to align to the development team's agile processes."},{"score":3,"descriptor":"Business and Engineering form true collaborative partnership. "},{"score":3,"descriptor":"Engineering is a key player in driving product strategic direction, while business team leverages agile process to drive discovery and critical learning to guide business direction."}]},{"section":"Release Planning","descriptor":"Adjust customer appetite via a velocity-based estimate of engineering capacity","raw":"Release Planning Adjust customer appetite via a velocity-based estimate of engineering capacity","number":-1,"entries":[{"score":-1,"descriptor":"Estimates are not done by the team who will be doing the work."},{"score":-1,"descriptor":"There is no flexibility on resources, scope, or timeframe (iron triangle). "},{"score":-1,"descriptor":"The team is asked to commit without a realistic plan."},{"score":0,"descriptor":"Some but not all key stakeholders and functions are included."},{"score":0,"descriptor":"Team capacity is considered during release planning."},{"score":0,"descriptor":"Team velocity (if available) is considered during release planning."},{"score":0,"descriptor":"Planning is completed in a reasonable time and completed before the start of the next release."},{"score":0,"descriptor":"There is an understanding that scope will change during the release as new information is discovered."},{"score":1,"descriptor":"Risks, opportunities, and assumptions are made visible."},{"score":1,"descriptor":"The release plan covers a time box no larger than 3 months and if larger than six weeks, includes at least 1 internal release (UAT). "},{"score":1,"descriptor":"Clear and measurable success criteria for the release have been agreed upon and documented. "},{"score":1,"descriptor":"All key stakeholders and functions are included."},{"score":1,"descriptor":"Adequate slack is left in the plan to allow for discovery and risk."},{"score":2,"descriptor":"The release plan considers historical performance beyond just velocity."},{"score":2,"descriptor":"The release plan is well-understood by the team and reviewed and reworked on a regular basis."},{"score":2,"descriptor":"Just enough UX and architectural runway work for this release was done ahead of time."},{"score":3,"descriptor":"The team and stakeholders are readily available at short notice to build or update the release plan."},{"score":3,"descriptor":"The team applies the concept of MVP to advantage and is skilled at crafting a scope that answers critical questions and tests assumptions."}]},{"section":"Business Goals & Objectives","descriptor":"Collaboratively build the customer's definition of success for a program","raw":"Business Goals & Objectives Collaboratively build the customer’s definition of success for a program","number":-1,"entries":[{"score":-1,"descriptor":"Vague expressions of need received from the business."},{"score":-1,"descriptor":"The business is not bought into our methodology around requirements definition."},{"score":0,"descriptor":"There are less than 20 high level goals."},{"score":1,"descriptor":"Goals map back to users and their problems."},{"score":1,"descriptor":"Goals have metrics (KPI's) that will prove business value delivered."},{"score":1,"descriptor":"There are less than 12 high level goals."},{"score":1,"descriptor":"Relative prioritization of the business goals and objectives is in place."},{"score":1,"descriptor":"There is clear traceability from business goals to the release backlog."},{"score":1,"descriptor":"Business goals are revisited after each deployment, reviewed and updated."},{"score":2,"descriptor":"The business goals have acceptance criteria."},{"score":2,"descriptor":"The problem, who the users are and the goals themselves have been experimentally tested and validated with some kind of experiment."},{"score":2,"descriptor":"Team seeks ways to evaluate the KPI's as soon as reasonably possible after deployment."},{"score":3,"descriptor":"The business goals have customer success criteria."},{"score":3,"descriptor":"There is fluid collaboration between the team and the business. "},{"score":3,"descriptor":"The business has supplied one or more people who are experts in the problem domain. "},{"score":3,"descriptor":"The engineering and business partnership is flexible to adapt to emergent requirements and needs. "},{"score":3,"descriptor":"Timely specification documents are created and revised so that external stakeholders are informed. "},{"score":3,"descriptor":"This document could have the capability of linking the specification to the working application in an automated fashion."}]},{"section":"User Stories","descriptor":"Express work as small, independent requests for value from a customer persona's perspective","raw":"User Stories Express work as small, independent requests for value from a customer persona’s perspective","number":-1,"entries":[{"score":-1,"descriptor":"Development work is driven by large requirements documents. "},{"score":-1,"descriptor":"Development work is planned out 6 months in advance or longer. "},{"score":-1,"descriptor":"Development work is split along process lines or functional areas, e.g., design, code, test, integrate, architect, UX etc. "},{"score":-1,"descriptor":"Development work is split along architectural lines, e.g., UI, database, data access layer, etc. "},{"score":0,"descriptor":"User stories include 'end user' aspect."},{"score":0,"descriptor":"User stories can all be easily found in one place."},{"score":0,"descriptor":"User stories are ordered by priority in a backlog."},{"score":0,"descriptor":"User stories are sized or estimated. (E in INVEST)"},{"score":0,"descriptor":"User stories define a complete vertical slice of functionality. (I in INVEST)"},{"score":0,"descriptor":"User stories contain acceptance criteria. (T in INVEST)"},{"score":1,"descriptor":"User stories are a starting point for a conversation and there is evidence that the team refines or rewrites user stories. (N in INVEST)"},{"score":1,"descriptor":"User stories have a narrative around business value. (V in INVEST)"},{"score":1,"descriptor":"User stories are all small enough to be finished in a sprint. (S in INVEST)"},{"score":1,"descriptor":"User stories follow a standard form such as 'In order to <business value description>, As a <persona>, I want <feature>. "},{"score":1,"descriptor":"User story development is driven by collaborative lightweight artifacts (e.g. lo-fi prototypes, story mapping). "},{"score":1,"descriptor":"User stories represent an agreement between the Product Owner (business, customer) and the development team."},{"score":2,"descriptor":"User story acceptance criteria follow a BDD approach an example of which can be found in the Gherkin syntax (https://cucumber.io/docs/gherkin/). "},{"score":2,"descriptor":"Multiple scenarios are included in acceptance criteria including success conditions, failure modes and edge cases."},{"score":2,"descriptor":"All user stories are traceable back to the vision and business goals & objectives."},{"score":3,"descriptor":"Other stakeholders and users are brought into the discussion whenever needed to develop user stories. "}]},{"section":"Information Radiators Ensure visibility of valuable project status indicators","descriptor":"","raw":"Information Radiators Ensure visibility of valuable project status indicators ","number":-1,"entries":[{"score":-1,"descriptor":"No project status information of any kind is posted in the (physical or digital) team area."},{"score":0,"descriptor":"Project status details are available in the (physical or digital) team area."},{"score":1,"descriptor":"Information radiators are up-to-date."},{"score":1,"descriptor":"At least one of the following valuable project status indicators is available to the team AND to in-house visitors:Release Plan & Road BlocksBurn Up & VelocityStory Card WallUnit Test & Acceptance Test CoverageCI Metrics"},{"score":2,"descriptor":"Team decides what is visible."},{"score":2,"descriptor":"Some advanced examples of information radiators are used - like for instance;Flow of information is centered around the workspace. The walls should tell a story to the team and customerCharts track everything from future product requests to fully-tested stories"},{"score":2,"descriptor":"Other charts are available and accurate - may include;Organizational Value stream mapProgram Demand ManagementPersonas / Persona Maps"},{"score":3,"descriptor":"TBD"}]},{"section":"Learning and Development","descriptor":"Build a culture of sharing and growth while maintaining focus on T-Shaped people","raw":"Learning and Development Build a culture of sharing and growth while maintaining focus on T-Shaped people","number":-1,"entries":[{"score":-1,"descriptor":"The only learning is mandated corporate learning."},{"score":0,"descriptor":"There is budget available for learning and development."},{"score":0,"descriptor":"Both management and team values learning and development."},{"score":0,"descriptor":"There is some level of team self-organized and self-motivated learning.  "},{"score":0,"descriptor":"Opportunities are taken by team members to learn from each other and knowledge share."},{"score":1,"descriptor":"Learning and development takes place even when teams are stretched or understaffed."},{"score":1,"descriptor":"Team owns budget and decides how to invest in learning and development."},{"score":1,"descriptor":"Majority of team are involved when a learning & development activity takes place."},{"score":1,"descriptor":"Learning and development is included in OKRs."},{"score":1,"descriptor":"Attendance at conferences, meetups, and other Socratic forums is encouraged and sponsored."},{"score":1,"descriptor":"Majority of team is involved in deciding topics and developing content for learning and development."},{"score":2,"descriptor":"Team shares learning and development information on the team wiki."},{"score":2,"descriptor":"Team makes use of local communities for learning and development."},{"score":2,"descriptor":"Learning groups go beyond team members and include members from management."},{"score":3,"descriptor":"The team holds regular (weekly) learning events."}]},{"section":"Sprint Planning","descriptor":"Meet to determine which user stories will be taken into the sprint backlog","raw":"Sprint Planning Meet to determine which user stories will be taken into the sprint backlog","number":-1,"entries":[{"score":-1,"descriptor":"Sprint planning is a long meeting >5% of a sprint duration) that includes backlog grooming, narrative writing, estimation, capacity planning and/or other context setting activities."},{"score":-1,"descriptor":"Attempts are made to plan a sprint day by day or per team member."},{"score":-1,"descriptor":"The team is handed a commitment."},{"score":0,"descriptor":"Sprint Planning always takes place."},{"score":0,"descriptor":"Product owner participates in the planning."},{"score":1,"descriptor":"Team members gain valuable direction from Sprint Planning."},{"score":1,"descriptor":"All user stories meet the definition of ready prior to the start of the sprint."},{"score":1,"descriptor":"User stories are tasked out (if necessary) in the sprint planning meeting."},{"score":1,"descriptor":"Team makes their own commitments for the sprint based on velocity and capacity planning. "},{"score":1,"descriptor":"The team has a shared agreement on the achievable scope of work plan for the sprint."},{"score":2,"descriptor":"Sprint planning is a short event where team comes together to get a go/no-go decision on stories."},{"score":2,"descriptor":"Acceptance criteria and assumptions are revisited and tasks are highlighted as a reminder."},{"score":2,"descriptor":"The focus of planning shifts from the team to product owners and the business to prioritize the next set of user stories."},{"score":3,"descriptor":"Planning is real-time based on a blue-print of an agile release plan."},{"score":3,"descriptor":"Intent behind planning is not team commitment but adaptive change, balancing business value with cost and time."}]},{"section":"Backlog Refinement","descriptor":"Meet frequently to keep the backlog up-to-date and ready for the next sprint","raw":"Backlog Refinement Meet frequently to keep the backlog up-to-date and ready for the next sprint","number":-1,"entries":[{"score":-1,"descriptor":"There is no meeting to refine the backlog."},{"score":0,"descriptor":"The three amigos sometimes meet to refine the backlog."},{"score":1,"descriptor":"The three amigos always meet to refine the backlog."},{"score":1,"descriptor":"Sufficient work is done during the Backlog Refinement meeting (and perhaps afterward) so that stories for Sprint Planning generally meet most INVEST criteria and have well-understood acceptance criteria so that the team considers them \"ready\"."},{"score":2,"descriptor":"By the end of the Backlog Refinement meeting all stories pre-positioned for the coming sprint have sufficient definition and acceptance criteria so that the team considers them \"ready\"."},{"score":2,"descriptor":"Work on defining stories for the next release(s) sometimes occurs."},{"score":3,"descriptor":"By the end of the Backlog Refinement meeting all stories pre-positioned for the coming sprint have Gherkin (or other behavioral specification) acceptance criteria and the team considers them \"ready\"."},{"score":3,"descriptor":"Work on defining stories and story maps for the next release(s) occurs regularly enough that additional events for epic decomposition, story writing and mapping is not required prior to Release Planning (regular in-the-flow-of-the-day collaboration on stories is not an additional event)."}]},{"section":"Daily Standup","descriptor":"Meet briefly to share progress made against the sprint backlog","raw":"Daily Standup Meet briefly to share progress made against the sprint backlog","number":-1,"entries":[{"score":-1,"descriptor":"Stand-ups are frequently monopolized by individuals or hijacked by management."},{"score":-1,"descriptor":"Standup is used to update the team board causing longer meetings."},{"score":-1,"descriptor":"The standup is not attended on time."},{"score":0,"descriptor":"Team members highlight what they did yesterday, what they will do today."},{"score":0,"descriptor":"Team members highlight any impediments/blockers."},{"score":0,"descriptor":"Highlights are related to the sprint backlog."},{"score":0,"descriptor":"Team avoids using Daily Standup to solve problems."},{"score":0,"descriptor":"Standups are completed in an average of < 15 mins."},{"score":0,"descriptor":"The full team turns up on time."},{"score":0,"descriptor":"Problem solving is taken outside of the standup."},{"score":0,"descriptor":"Someone will stop conversations from going down 'rat holes'."},{"score":0,"descriptor":"Stand ups are always completed in 15 mins."},{"score":2,"descriptor":"Team has improved stand ups through the retrospective process."},{"score":2,"descriptor":"Standup is self-facilitated by the team."},{"score":3,"descriptor":"Team has reinvented the daily standup to fit their circumstances to better enable fast feedback and adaption of plans."}],"level":{"number":1,"entries":["The full team turns up on time.","Problem solving is taken outside of the standup.","Someone will stop conversations from going down 'rat holes'.","Stand ups are always completed in 15 mins.","2","44","Team has improved stand ups through the retrospective process.","Standup is self-facilitated by the team.","3","Team has reinvented the daily standup to fit their circumstances to better enable fast feedback and adaption of plans."]},"section-sprint":{"section":"Sprint Demo","descriptor":"Confirm that sprint output meets customer expectations and gather feedback","raw":"Sprint Demo Confirm that sprint output meets customer expectations and gather feedback","number":-1,"entries":["There is no clear indication of working software.","0","44","444","Demonstration always takes place.","Feedback is captured.","The Product Owner is present.","Team knows the stories to demonstrate, and they are complete.","Effective time management allow team to complete demonstration of planned stories within the meeting timebox.","1","~","444","Demonstration is at an appropriate level for the stakeholders, focused on how product is used instead of how it is implemented","Stories are accepted and approved by Product Owner in order for stories to make it to the demo.","Demonstration is planned in advance and demoed features clearly work.","Demonstration uses realistic data.","Demonstration only shows new features, unless old features are necessary to provide context.","2","Demonstrations are well scripted with a value-based story line.","Majority of stakeholders get to see the demo. For example, this may be achieved by multiple demos or recording.","3","Product Owner articulates on how sprint results align to business goals & objectives.","Product Owner finds ways of maximizing business participation.",""]},"section-retro":{"section":"Retrospective","descriptor":"Team drives their own, effective process of looking for opportunities to improve","raw":"Retrospective Team drives their own, effective process of looking for opportunities to improve","number":-1,"entries":["No sprint retrospective held","When retrospectives are held, the same topics resurface again and again because problems are not being solved.","0","Retrospectives are held every sprint.","1","Retrospectives generate a list of pluses and deltas for improvement action. ","There is a list of who is assigned to each action item and be accountable for the task.","Problems identified in the retrospective have resulted in a root cause analysis or have been followed by change to the team's set of working agreements.","During the retrospective (or at least once per sprint) the team reviews performance metrics such as velocity, quality, and progress. ","Retrospective action items are followed up in subsequent retrospectives.","Retrospectives identify learning & development opportunities.","2","Retrospectives have flexibility so that a specific topic may be addressed and solved in the session.","3","This higher order of agility around retrospectives describes an organization where best lessons learned and best practices resulting from retrospective activities are rapidly shared and implemented, where appropriate, across all teams.",""]},"section-unit":{"section":"Unit Testing","descriptor":"Write fast and durable tests to ensure independent units of code continue to work as intended","raw":"Unit Testing Write fast and durable tests to ensure independent units of code continue to work as intended","number":-1,"entries":["The team does not understand or value unit testing.","0","Developers write unit tests during a sprint for some stories.","There is an awareness of mocks, stubs and test doubles and some use of them in tests.","1","The unit tests always isolate the functionality under test, hence a failing test pinpoints a problem.","The unit tests are part of the CI build.","2","Tests are independent, can be run in any order, and don't share test data.","The team values fast and durable tests. ","The team recognizes the value of BDD in the emerging design and the prevention of waste by only building functionality that is required (YAGNI). ","The team has a standard mocking framework that they use for all mocks, stubs, doubles. ","The entire team recognizes the value of refactoring of unit tests.","3","TBD",""]},"section-automated":{"section":"Automated Acceptance Testing","descriptor":"Define rich acceptance criteria in plain language","raw":"Automated Acceptance Testing Define rich acceptance criteria in plain language","number":-1,"entries":["~","Heavy post development Test Case suite generation culture followed by a UAT phase.","0","Team understands BDD conceptually.","1","44","Test cases utilize BDD style specifications.","User stories have BDD style acceptance criteria, which are leveraged for QA (could be manual or automated testing).","The Three Amigo's have collective ownership of the testing approach.","2","User stories are rich in Acceptance Criteria illustrated by example(s) that have corresponding automated (acceptance/regression) test suites.","These tests are developed in parallel to story development by QA using our standard tools – Karate and Playwright.","Tests are peer-reviewed and managed like code","These tests are kept fresh with newer richer examples with the growth of codebase and are frequently reviewed by the business.","3","Acceptance Criteria generated by the business with rich example(s) are the core of user stories.",""]},"section-refactor":{"section":"Refactoring","descriptor":"Consistently rework code to reduce technical debt","raw":"Refactoring Consistently rework code to reduce technical debt","number":-1,"entries":["The value of the continuous improvement of the design of the code is not understood by the team.","0","There is a general understanding of what refactoring is.","1","The team knows how to use the IDE tools for refactoring.","The team understands refactoring and how to apply it.","Refactoring is applied to targeted problem areas.","Static code analysis metrics are used to target areas in the code base for refactoring.","2","Refactoring is applied consistently across the code base.","Static code analysis thresholds are a gating item for the definition of a successful build.","There is a technical debt list that is used to prioritize refactoring activities with new feature development or other sustaining activities.","The team refactors tests as well as code (all code artifacts – Models, Views, Controllers, DB Schema, Stored Procedures, HTML, CSS, etc).","3","Design patterns such as the SOLID principles are applied to guide improvement.","Refactoring enables emergent design.",""]},"section-pair":{"section":"Pair Programming","descriptor":"Often perform work in pairs to improve quality and limit specialization","raw":"Pair Programming Often perform work in pairs to improve quality and limit specialization","number":-1,"entries":["No understanding of pair programming or there is concern that It will lower the utilization rate of individual developers.","0","~","Random acts of pair programming.","At least 1 hour per developer per week of pair programming.","Pairing happens when an issue arises and there is significant pressure to fix it fast.","1","At least 1 hour per developer per day of pair programming.","Pair programming includes the navigator and driver, switching roles often.","Pair programming takes place whenever a new person joins the team.","There is some thought by the team to rotate or switch pairs on a regular basis.","Since pair programming results in more intense work, active attention is given to sustainable pace - perhaps the pomodoro technique is employed.","2","More than 4 hours of pair programming per day.","The team has a working agreement to actively switch pair partners and ensure everyone has a chance to pair with everyone else on the team.","Management encourages pair programming.","3","Promiscuous pairing.","In addition to more than 4 hours of pair programming, regularly switching navigator and driver roles without pairing with the same partner everyday. ","Team manages risk and uncertainty for the team by making coding decisions in pairs leading to a higher degree of confidence when problems or solutions are not 100% defined.","Pair programming is a promoted as part of a desirable environment for potential recruits.",""]},"section-design":{"section":"Design Simplicity","descriptor":"Solve problems with the minimum necessary code and limited complexity","raw":"Design Simplicity Solve problems with the minimum necessary code and limited complexity","number":-1,"entries":["Big up-front design that attempts to accommodate all potential future needs.","Team disagrees with YAGNI (You Aren’t Going to Need It).","Team disagrees with evolving design and architecture.","Team does not feel they can update their design / refactor their way to the future - they feel a need to invent everything up front - especially data design.","0","Team is aware of YAGNI and evolving design and architecture, and there is some evidence of following these principles.","If there is an external architecture group, then the team has some input on architectural choices.","1","Team is aware of low coupling and high cohesion and can find examples in their code base.","Most of the team has some understanding of design patterns and can find examples in their code base.","There is some acceptance by the team that refactoring can be a valuable tool in updating their design with new requirements.","2","The team discusses accidental complexity and will make changes to remove it.","Many of the developers embrace single responsibility, design by contract, dependency injection, the Law of Demeter etc.","3","~","The team polices each other on YAGNI and are disciplined about implementing only the code to pass the story acceptance tests.","Spikes are used with each release to introduce new ideas and test architectural decisions.","All of the developers understand and work to SOLID (https://en.wikipedia.org/wiki/SOLID).","The team values and updates the design documents to ensure we can teach new people and potential customers.","The team actively works to recognize and remove accidental complexity from evolving designs.",""]},"section-definition":{"section":"Definition of Done","descriptor":"Formalize a shared definition of what it means to be truly “done” with a unit of work","raw":"Definition of Done Formalize a shared definition of what it means to be truly “done” with a unit of work","number":-1,"entries":["There is no Definition of Done.","There is a Definition of Done that is 'code complete' only.","Individuals complete work to varying levels of done-ness with no visibility to what work is or is not being completed for each story.","0","There is a reasonable and documented Definition of Done.","Definition of Done is mostly followed.","1","Definition of Done was created by the team","Definition of Done documents the breadth of activities necessary for code to be ready for production. ","Everyone on the team knows the Definition of Done, follows it consistently and can explain what Done means for their team.","There may be a Release level Definition of Done that captures activities that cannot be achieved in a user story definition of done.","Stories that do not meet the Definition of Done are not accepted and are not demonstrated to the customer.","2","~","Definition of Done is reviewed by the team on a regular basis and adjustments / improvements are made as needed. ","Debt repayment needed to bring existing code up to an updated Definition of Done enters the backlog as one or more new stories. ","Changes to process, infrastructure, teams or organizational structure are made as needed to enable all work to meet the Definition of Done at the story level so any Release level Definition of Done becomes moot.","3","Continuous deployment enabled.",""]},"section-continous":{"section":"Continuous Integration - Legacy","descriptor":"Bring changes together very frequently to avoid conflicts and speed learning","raw":"Continuous Integration - Legacy Bring changes together very frequently to avoid conflicts and speed learning","number":-1,"entries":["Build is manually performed, infrequently, custom every time or may be repeatable but static.","Steps to run and configure builds are not captured in any manner.","The build process is considered 'tribal knowledge'.","0","Build to a dedicated environment is repeatable and automated.","There is automated unit testing in the build.","State of the build is a responsibility of the team.","1","~","Build is automatically triggered.","Broken builds get fixed within 24 hours.","There is reporting of code quality, build statistics, and testing results. ","If complete regression build runs too long, then the build may be split into (1) Fast, incremental commit build launched for each check-in and (2) Complete regression build with automated functional tests as part of success criteria.","The commit build provides feedback on common build problems in under 10 minutes.","Each team member’s code is pulled regularly (at least once a day) triggering the CI system.","2","Build stages (incremental and regression) are linked in order to remove duplication across end-to-end build process.","Build success criteria extend to non-functional considerations - such as architectural breaches, slow tests, and coding standard violations.","Reporting capabilities provide complete transparency across all aspects of code quality, build statistics, and testing results.","3","Builds are done in parallel reducing overall build time.","Targeted feedback for corrective measures on failed builds occur across builds.","Reporting capabilities provide analytics, and cross module comparisons.","There are rollback capabilities for broken builds.",""]},"section-continous-micro":{"section":"Continuous Integration - Microservices","descriptor":"Bring changes together very frequently to avoid conflicts and speed learning","raw":"Continuous Integration - Microservices Bring changes together very frequently to avoid conflicts and speed learning","number":-1,"entries":["Build is manually performed, infrequently, custom every time or may be repeatable but static.","Steps to run and configure builds are not captured in any manner.","The build process is considered 'tribal knowledge'.","0","Build to a dedicated environment is repeatable and automated.","There is automated unit testing in the build.","State of the build is a responsibility of the team.","1","~","Build is automatically triggered.","Broken builds get fixed within 24 hours.","There is reporting of code quality, build statistics, and testing results. ","If complete regression build runs too long, then the build may be split into (1) Fast, incremental commit build launched for each check-in and (2) Complete regression build with automated functional tests as part of success criteria.","The commit build provides feedback on common build problems in under 10 minutes.","Each team member pushes code regularly (at least once a day) triggering the CI system.","2","Build success criteria extend to non-functional considerations - such as architectural breaches, slow tests, and coding standard violations.","Reporting capabilities provide complete transparency across all aspects of code quality, build statistics, and testing results.","3","Builds are done in parallel reducing overall build time.","Targeted feedback for corrective measures on failed builds occur across builds.","Reporting capabilities provide analytics, and cross module comparisons.","There are rollback capabilities for broken builds.",""]},"section-continuous-legacy":{"section":"Continuous Delivery - Legacy","descriptor":"Strive to make the output of every sprint potentially releasable","raw":"Continuous Delivery - Legacy Strive to make the output of every sprint potentially releasable","number":-1,"entries":["Deployment is manually performed, infrequently custom every time; or may be repeatable but static. ","Deployment is owned by a specific member of the team.","0","no","Deployment to a dedicated environment is repeatable and automated and triggered on a schedule. ","State of the deployment is a responsibility of a role defined for build and release engineer.","Software is built in every stage of the deployment pipeline.","1","Deployment occurs based on a cycle that is as short as possible while accommodating a full loop of the testing feedback cycle. ","State of the deployment is the responsibility of the team.","Binaries are built once, and deployed to multiple environments, as necessary. ","Testing and release environment mirror production. ","2","Deployment occurs based on a cycle that is as short as possible while accommodating a full loop of the user feedback cycle.","Deployment can be made on components that allow for targeted features, - allowing for incremental feature releases.","Automation extends to non-server configuration such as networks, and external services.","3","Deploy can be made based on limited access to specific target end users.","Incremental rollback occurs as needed.","Continuous delivery environment collects data about feature usage and allows for blue green testing before full feature release in production.",""]},"section-continousMicro":{"section":"Continuous Delivery - Microservices","descriptor":"Strive to make the output of every sprint potentially releasable","raw":"Continuous Delivery - Microservices Strive to make the output of every sprint potentially releasable","number":-1,"entries":["Deployment is manually performed, infrequently custom every time; or may be repeatable but static. ","Deployment is owned by a specific member of the team.","0","no","no","Deployment to a dedicated environment is repeatable and automated and triggered on a schedule. ","State of the deployment is a responsibility of a role defined for build and release engineer.","Software is built in every stage of the deployment pipeline.","1","Deployment occurs based on a cycle that is as short as possible while accommodating a full loop of the testing feedback cycle. ","State of the deployment is the responsibility of the team.","Binaries are built once, and deployed to multiple environments, as necessary. ","Testing and release environment mirror production. ","2","Deployment occurs based on a cycle that is as short as possible while accommodating a full loop of the user feedback cycle.","Deployment can be made on components that allow for targeted features, - allowing for incremental feature releases.","Automation extends to non-server configuration such as networks, and external services.","3","Deploy can be made based on limited access to specific target end users.","Incremental rollback occurs as needed.","Continuous delivery environment collects data about feature usage and allows for blue green testing before full feature release in production.",""]},"section-automatedTesting":{"section":"Automated Regression Testing Build a fast & durable suite of tests ensuring features continue to meet acceptance criteria","descriptor":"","raw":"Automated Regression Testing Build a fast & durable suite of tests ensuring features continue to meet acceptance criteria ","number":-1,"entries":["No automated regression tests - it is all done manually.","The team complains that they have tried to get automated functional tests to work in the past, but they say it slows them down and is too expensive for this group to do.","Little to no organizational support for leadership promoting an investment in test automation.","0","There is some automated testing, including some in the automated regression build.","1","448","Automated regression tests complete in less than two hours.","Code coverage is measured on automated functional tests.","All of the tests are included in a CI build and there are rarely test cases commented out or ignored.","The team values automated testing.","Pipeline includes gating factor to ensure that important code quality metrics don’t backslide","2","The team agrees that the automated tests are valuable and organize to run them in various CI builds.","They recognize that they can't be run all of the time for each build, so they will be segregated and run at different times.","There may be time sequences where all of the builds are not running successfully because the tests are failing.","Sometimes they will allow a small set of tests to be commented out as they are difficult to debug/fix.","Similar to automated unit testing, the team understands and works to have fast and reliable automated feature tests.","A smoke test is included with the unit tests to ensure major capabilities continue to work with each check-in.","3","Speed and durability are significant concerns, and the team works at writing good and fast tests.","All the tests are allocated to a CI build to ensure they run at some times.","The team understand that the automated tests are a real safety net and use them to strive for zero defects to production.","Performance and other non-functional requirements are included in the tests.","The tests are structured so that the developers run all unit tests and key functional tests (smoke tests) prior to every check-in.",""]},"section-sourceCode-legacy":{"section":"Source Code Management - Legacy","descriptor":"Employ modern tools to control and manage all items that constitute the application","raw":"Source Code Management - Legacy Employ modern tools to control and manage all items that constitute the application","number":-1,"entries":["Traditional schemes based on file-locking and time-sharing or no code repository is used.","Check-ins are not performed in short time-frames, leaving code unprotected and not integrated for long periods of time (greater than a couple of days).","Code branches are not well understood or managed.","0","The team uses a supported SCM for code and tests..","1","~","IDE(s) integrate with SCM.","Developers include meaningful comments in commits.","Build can pull code from repository.","The team checks in at least every couple of days into the mainline trunk.","Mainline branches are protected from inadvertent changes.","Each team member can often merge their code with no merge problems.","2","SCM supports merging; optimistic check-ins.","Build does pull code from repository.","Check-ins are done daily, if not several times per day.","Team does not check in code if the build is broken, unless the check-in is to fix the build.","Production or release branch fixes are always applied consistently to trunk.","3","Commits are logically orchestrated; all development and release collateral is in SCM.","Gated check-in's are enforced; all steps passing with improving metrics. ","Branches are used effectively, and merges are are easily supported.",""]},"section-sourcecode-Micro":{"section":"Source Code Management - Microservices","descriptor":"Employ modern tools to control and manage all items that constitute the application","raw":"Source Code Management - Microservices Employ modern tools to control and manage all items that constitute the application","number":-1,"entries":["Traditional schemes based on file-locking and time-sharing or no code repository is used.","Check-ins are not performed in short time-frames, leaving code unprotected and not integrated for long periods of time (greater than a couple of days).","Code branches are not well understood or managed.","0","The team uses a supported SCM for code and tests..","1","~","IDE(s) integrate with SCM.","Developers include meaningful comments in commits.","Build can pull code from repository.","The team checks in at least every couple of days into the mainline trunk.","Mainline branches are protected from inadvertent changes.","Each team member can often merge their code with no merge problems.","2","SCM supports merging; optimistic check-ins.","Build does pull code from repository.","Check-ins are done daily, if not several times per day.","Team does not check in code if the build is broken, unless the check-in is to fix the build.","3","Commits are logically orchestrated; all development and release collateral is in SCM.","Gated check-in's are enforced; all steps passing with improving metrics. ","Branches are used effectively, and merges are are easily supported.",""]}},{"section":"Sprint Demo","descriptor":"Confirm that sprint output meets customer expectations and gather feedback","number":-1,"entries":[{"score":-1,"descriptor":"There is no clear indication of working software."},{"score":0,"descriptor":"Demonstration always takes place."},{"score":0,"descriptor":"Feedback is captured."},{"score":0,"descriptor":"The Product Owner is present."},{"score":0,"descriptor":"Team knows the stories to demonstrate, and they are complete."},{"score":0,"descriptor":"Effective time management allow team to complete demonstration of planned stories within the meeting timebox."},{"score":1,"descriptor":"Demonstration is at an appropriate level for the stakeholders, focused on how product is used instead of how it is implemented"},{"score":1,"descriptor":"Stories are accepted and approved by Product Owner in order for stories to make it to the demo."},{"score":1,"descriptor":"Demonstration is planned in advance and demoed features clearly work."},{"score":1,"descriptor":"Demonstration uses realistic data."},{"score":1,"descriptor":"Demonstration only shows new features, unless old features are necessary to provide context."},{"score":2,"descriptor":"Demonstrations are well scripted with a value-based story line."},{"score":2,"descriptor":"Majority of stakeholders get to see the demo. For example, this may be achieved by multiple demos or recording."},{"score":3,"descriptor":"Product Owner articulates on how sprint results align to business goals & objectives."},{"score":3,"descriptor":"Product Owner finds ways of maximizing business participation."}]},{"section":"Retrospective","descriptor":"Team drives their own, effective process of looking for opportunities to improve","number":-1,"entries":[{"score":-1,"descriptor":"No sprint retrospective held"},{"score":-1,"descriptor":"When retrospectives are held, the same topics resurface again and again because problems are not being solved."},{"score":0,"descriptor":"Retrospectives are held every sprint."},{"score":1,"descriptor":"Retrospectives generate a list of pluses and deltas for improvement action. "},{"score":1,"descriptor":"There is a list of who is assigned to each action item and be accountable for the task."},{"score":1,"descriptor":"Problems identified in the retrospective have resulted in a root cause analysis or have been followed by change to the team's set of working agreements."},{"score":1,"descriptor":"During the retrospective (or at least once per sprint) the team reviews performance metrics such as velocity, quality, and progress. "},{"score":1,"descriptor":"Retrospective action items are followed up in subsequent retrospectives."},{"score":1,"descriptor":"Retrospectives identify learning & development opportunities."},{"score":2,"descriptor":"Retrospectives have flexibility so that a specific topic may be addressed and solved in the session."},{"score":3,"descriptor":"This higher order of agility around retrospectives describes an organization where best lessons learned and best practices resulting from retrospective activities are rapidly shared and implemented, where appropriate, across all teams."}]},{"section":"Unit Testing","descriptor":"Write fast and durable tests to ensure independent units of code continue to work as intended","number":-1,"entries":[{"score":-1,"descriptor":"The team does not understand or value unit testing."},{"score":0,"descriptor":"Developers write unit tests during a sprint for some stories."},{"score":0,"descriptor":"There is an awareness of mocks, stubs and test doubles and some use of them in tests."},{"score":1,"descriptor":"The unit tests always isolate the functionality under test, hence a failing test pinpoints a problem."},{"score":1,"descriptor":"The unit tests are part of the CI build."},{"score":2,"descriptor":"Tests are independent, can be run in any order, and don't share test data."},{"score":2,"descriptor":"The team values fast and durable tests. "},{"score":2,"descriptor":"The team recognizes the value of BDD in the emerging design and the prevention of waste by only building functionality that is required (YAGNI). "},{"score":2,"descriptor":"The team has a standard mocking framework that they use for all mocks, stubs, doubles. "},{"score":2,"descriptor":"The entire team recognizes the value of refactoring of unit tests."},{"score":3,"descriptor":"TBD"}]},{"section":"Automated Acceptance Testing","descriptor":"Define rich acceptance criteria in plain language","number":-1,"entries":[{"score":-1,"descriptor":"Heavy post development Test Case suite generation culture followed by a UAT phase."},{"score":0,"descriptor":"Team understands BDD conceptually."},{"score":1,"descriptor":"Test cases utilize BDD style specifications."},{"score":1,"descriptor":"User stories have BDD style acceptance criteria, which are leveraged for QA (could be manual or automated testing)."},{"score":1,"descriptor":"The Three Amigo's have collective ownership of the testing approach."},{"score":2,"descriptor":"User stories are rich in Acceptance Criteria illustrated by example(s) that have corresponding automated (acceptance/regression) test suites."},{"score":2,"descriptor":"These tests are developed in parallel to story development by QA using our standard tools - Karate and Playwright."},{"score":2,"descriptor":"Tests are peer-reviewed and managed like code"},{"score":2,"descriptor":"These tests are kept fresh with newer richer examples with the growth of codebase and are frequently reviewed by the business."},{"score":3,"descriptor":"Acceptance Criteria generated by the business with rich example(s) are the core of user stories."}]},{"section":"Refactoring","descriptor":"Consistently rework code to reduce technical debt","number":-1,"entries":[{"score":-1,"descriptor":"The value of the continuous improvement of the design of the code is not understood by the team."},{"score":0,"descriptor":"There is a general understanding of what refactoring is."},{"score":1,"descriptor":"The team knows how to use the IDE tools for refactoring."},{"score":1,"descriptor":"The team understands refactoring and how to apply it."},{"score":1,"descriptor":"Refactoring is applied to targeted problem areas."},{"score":1,"descriptor":"Static code analysis metrics are used to target areas in the code base for refactoring."},{"score":2,"descriptor":"Refactoring is applied consistently across the code base."},{"score":2,"descriptor":"Static code analysis thresholds are a gating item for the definition of a successful build."},{"score":2,"descriptor":"There is a technical debt list that is used to prioritize refactoring activities with new feature development or other sustaining activities."},{"score":2,"descriptor":"The team refactors tests as well as code (all code artifacts - Models, Views, Controllers, DB Schema, Stored Procedures, HTML, CSS, etc)."},{"score":3,"descriptor":"Design patterns such as the SOLID principles are applied to guide improvement."},{"score":3,"descriptor":"Refactoring enables emergent design."}]},{"section":"Pair Programming","descriptor":"Often perform work in pairs to improve quality and limit specialization","number":-1,"entries":[{"score":-1,"descriptor":"No understanding of pair programming or there is concern that It will lower the utilization rate of individual developers."},{"score":0,"descriptor":"Random acts of pair programming."},{"score":0,"descriptor":"At least 1 hour per developer per week of pair programming."},{"score":0,"descriptor":"Pairing happens when an issue arises and there is significant pressure to fix it fast."},{"score":1,"descriptor":"At least 1 hour per developer per day of pair programming."},{"score":1,"descriptor":"Pair programming includes the navigator and driver, switching roles often."},{"score":1,"descriptor":"Pair programming takes place whenever a new person joins the team."},{"score":1,"descriptor":"There is some thought by the team to rotate or switch pairs on a regular basis."},{"score":1,"descriptor":"Since pair programming results in more intense work, active attention is given to sustainable pace - perhaps the pomodoro technique is employed."},{"score":2,"descriptor":"More than 4 hours of pair programming per day."},{"score":2,"descriptor":"The team has a working agreement to actively switch pair partners and ensure everyone has a chance to pair with everyone else on the team."},{"score":2,"descriptor":"Management encourages pair programming."},{"score":3,"descriptor":"Promiscuous pairing."},{"score":3,"descriptor":"In addition to more than 4 hours of pair programming, regularly switching navigator and driver roles without pairing with the same partner everyday. "},{"score":3,"descriptor":"Team manages risk and uncertainty for the team by making coding decisions in pairs leading to a higher degree of confidence when problems or solutions are not 100% defined."},{"score":3,"descriptor":"Pair programming is a promoted as part of a desirable environment for potential recruits."}]},{"section":"Design Simplicity","descriptor":"Solve problems with the minimum necessary code and limited complexity","number":-1,"entries":[{"score":-1,"descriptor":"Big up-front design that attempts to accommodate all potential future needs."},{"score":-1,"descriptor":"Team disagrees with YAGNI (You Aren't Going to Need It)."},{"score":-1,"descriptor":"Team disagrees with evolving design and architecture."},{"score":-1,"descriptor":"Team does not feel they can update their design / refactor their way to the future - they feel a need to invent everything up front - especially data design."},{"score":0,"descriptor":"Team is aware of YAGNI and evolving design and architecture, and there is some evidence of following these principles."},{"score":0,"descriptor":"If there is an external architecture group, then the team has some input on architectural choices."},{"score":1,"descriptor":"Team is aware of low coupling and high cohesion and can find examples in their code base."},{"score":1,"descriptor":"Most of the team has some understanding of design patterns and can find examples in their code base."},{"score":1,"descriptor":"There is some acceptance by the team that refactoring can be a valuable tool in updating their design with new requirements."},{"score":2,"descriptor":"The team discusses accidental complexity and will make changes to remove it."},{"score":2,"descriptor":"Many of the developers embrace single responsibility, design by contract, dependency injection, the Law of Demeter etc."},{"score":3,"descriptor":"The team polices each other on YAGNI and are disciplined about implementing only the code to pass the story acceptance tests."},{"score":3,"descriptor":"Spikes are used with each release to introduce new ideas and test architectural decisions."},{"score":3,"descriptor":"All of the developers understand and work to SOLID (https://en.wikipedia.org/wiki/SOLID)."},{"score":3,"descriptor":"The team values and updates the design documents to ensure we can teach new people and potential customers."},{"score":3,"descriptor":"The team actively works to recognize and remove accidental complexity from evolving designs."}]},{"section":"Definition of Done","descriptor":"Formalize a shared definition of what it means to be truly \"done\" with a unit of work","number":-1,"entries":[{"score":-1,"descriptor":"There is no Definition of Done."},{"score":-1,"descriptor":"There is a Definition of Done that is 'code complete' only."},{"score":-1,"descriptor":"Individuals complete work to varying levels of done-ness with no visibility to what work is or is not being completed for each story."},{"score":0,"descriptor":"There is a reasonable and documented Definition of Done."},{"score":0,"descriptor":"Definition of Done is mostly followed."},{"score":1,"descriptor":"Definition of Done was created by the team"},{"score":1,"descriptor":"Definition of Done documents the breadth of activities necessary for code to be ready for production. "},{"score":1,"descriptor":"Everyone on the team knows the Definition of Done, follows it consistently and can explain what Done means for their team."},{"score":1,"descriptor":"There may be a Release level Definition of Done that captures activities that cannot be achieved in a user story definition of done."},{"score":1,"descriptor":"Stories that do not meet the Definition of Done are not accepted and are not demonstrated to the customer."},{"score":2,"descriptor":"Definition of Done is reviewed by the team on a regular basis and adjustments / improvements are made as needed. "},{"score":2,"descriptor":"Debt repayment needed to bring existing code up to an updated Definition of Done enters the backlog as one or more new stories. "},{"score":2,"descriptor":"Changes to process, infrastructure, teams or organizational structure are made as needed to enable all work to meet the Definition of Done at the story level so any Release level Definition of Done becomes moot."},{"score":3,"descriptor":"Continuous deployment enabled."}]},{"section":"Continuous Integration - Legacy","descriptor":"Bring changes together very frequently to avoid conflicts and speed learning","number":-1,"entries":[{"score":-1,"descriptor":"Build is manually performed, infrequently, custom every time or may be repeatable but static."},{"score":-1,"descriptor":"Steps to run and configure builds are not captured in any manner."},{"score":-1,"descriptor":"The build process is considered 'tribal knowledge'."},{"score":0,"descriptor":"Build to a dedicated environment is repeatable and automated."},{"score":0,"descriptor":"There is automated unit testing in the build."},{"score":0,"descriptor":"State of the build is a responsibility of the team."},{"score":1,"descriptor":"Build is automatically triggered."},{"score":1,"descriptor":"Broken builds get fixed within 24 hours."},{"score":1,"descriptor":"There is reporting of code quality, build statistics, and testing results. "},{"score":1,"descriptor":"If complete regression build runs too long, then the build may be split into (1) Fast, incremental commit build launched for each check-in and (2) Complete regression build with automated functional tests as part of success criteria."},{"score":1,"descriptor":"The commit build provides feedback on common build problems in under 10 minutes."},{"score":1,"descriptor":"Each team member's code is pulled regularly (at least once a day) triggering the CI system."},{"score":2,"descriptor":"Build stages (incremental and regression) are linked in order to remove duplication across end-to-end build process."},{"score":2,"descriptor":"Build success criteria extend to non-functional considerations - such as architectural breaches, slow tests, and coding standard violations."},{"score":2,"descriptor":"Reporting capabilities provide complete transparency across all aspects of code quality, build statistics, and testing results."},{"score":3,"descriptor":"Builds are done in parallel reducing overall build time."},{"score":3,"descriptor":"Targeted feedback for corrective measures on failed builds occur across builds."},{"score":3,"descriptor":"Reporting capabilities provide analytics, and cross module comparisons."},{"score":3,"descriptor":"There are rollback capabilities for broken builds."}]},{"section":"Continuous Integration - Microservices","descriptor":"Bring changes together very frequently to avoid conflicts and speed learning","number":-1,"entries":[{"score":-1,"descriptor":"Build is manually performed, infrequently, custom every time or may be repeatable but static."},{"score":-1,"descriptor":"Steps to run and configure builds are not captured in any manner."},{"score":-1,"descriptor":"The build process is considered 'tribal knowledge'."},{"score":0,"descriptor":"Build to a dedicated environment is repeatable and automated."},{"score":0,"descriptor":"There is automated unit testing in the build."},{"score":0,"descriptor":"State of the build is a responsibility of the team."},{"score":1,"descriptor":"Build is automatically triggered."},{"score":1,"descriptor":"Broken builds get fixed within 24 hours."},{"score":1,"descriptor":"There is reporting of code quality, build statistics, and testing results. "},{"score":1,"descriptor":"If complete regression build runs too long, then the build may be split into (1) Fast, incremental commit build launched for each check-in and (2) Complete regression build with automated functional tests as part of success criteria."},{"score":1,"descriptor":"The commit build provides feedback on common build problems in under 10 minutes."},{"score":1,"descriptor":"Each team member pushes code regularly (at least once a day) triggering the CI system."},{"score":2,"descriptor":"Build success criteria extend to non-functional considerations - such as architectural breaches, slow tests, and coding standard violations."},{"score":2,"descriptor":"Reporting capabilities provide complete transparency across all aspects of code quality, build statistics, and testing results."},{"score":3,"descriptor":"Builds are done in parallel reducing overall build time."},{"score":3,"descriptor":"Targeted feedback for corrective measures on failed builds occur across builds."},{"score":3,"descriptor":"Reporting capabilities provide analytics, and cross module comparisons."},{"score":3,"descriptor":"There are rollback capabilities for broken builds."}]},{"section":"Continuous Delivery - Legacy","descriptor":"Strive to make the output of every sprint potentially releasable","number":-1,"entries":[{"score":-1,"descriptor":"Deployment is manually performed, infrequently custom every time; or may be repeatable but static. "},{"score":-1,"descriptor":"Deployment is owned by a specific member of the team."},{"score":0,"descriptor":"Deployment to a dedicated environment is repeatable and automated and triggered on a schedule. "},{"score":0,"descriptor":"State of the deployment is a responsibility of a role defined for build and release engineer."},{"score":0,"descriptor":"Software is built in every stage of the deployment pipeline."},{"score":1,"descriptor":"Deployment occurs based on a cycle that is as short as possible while accommodating a full loop of the testing feedback cycle. "},{"score":1,"descriptor":"State of the deployment is the responsibility of the team."},{"score":1,"descriptor":"Binaries are built once, and deployed to multiple environments, as necessary. "},{"score":1,"descriptor":"Testing and release environment mirror production. "},{"score":2,"descriptor":"Deployment occurs based on a cycle that is as short as possible while accommodating a full loop of the user feedback cycle."},{"score":2,"descriptor":"Deployment can be made on components that allow for targeted features, - allowing for incremental feature releases."},{"score":2,"descriptor":"Automation extends to non-server configuration such as networks, and external services."},{"score":3,"descriptor":"Deploy can be made based on limited access to specific target end users."},{"score":3,"descriptor":"Incremental rollback occurs as needed."},{"score":3,"descriptor":"Continuous delivery environment collects data about feature usage and allows for blue green testing before full feature release in production."}]},{"section":"Continuous Delivery - Microservices","descriptor":"Strive to make the output of every sprint potentially releasable","number":-1,"entries":[{"score":-1,"descriptor":"Deployment is manually performed, infrequently custom every time; or may be repeatable but static. "},{"score":-1,"descriptor":"Deployment is owned by a specific member of the team."},{"score":0,"descriptor":"Deployment to a dedicated environment is repeatable and automated and triggered on a schedule. "},{"score":0,"descriptor":"State of the deployment is a responsibility of a role defined for build and release engineer."},{"score":0,"descriptor":"Software is built in every stage of the deployment pipeline."},{"score":1,"descriptor":"Deployment occurs based on a cycle that is as short as possible while accommodating a full loop of the testing feedback cycle. "},{"score":1,"descriptor":"State of the deployment is the responsibility of the team."},{"score":1,"descriptor":"Binaries are built once, and deployed to multiple environments, as necessary. "},{"score":1,"descriptor":"Testing and release environment mirror production. "},{"score":2,"descriptor":"Deployment occurs based on a cycle that is as short as possible while accommodating a full loop of the user feedback cycle."},{"score":2,"descriptor":"Deployment can be made on components that allow for targeted features, - allowing for incremental feature releases."},{"score":2,"descriptor":"Automation extends to non-server configuration such as networks, and external services."},{"score":3,"descriptor":"Deploy can be made based on limited access to specific target end users."},{"score":3,"descriptor":"Incremental rollback occurs as needed."},{"score":3,"descriptor":"Continuous delivery environment collects data about feature usage and allows for blue green testing before full feature release in production."}]},{"section":"Automated Regression Testing Build a fast & durable suite of tests ensuring features continue to meet acceptance criteria","descriptor":"","number":-1,"entries":[{"score":-1,"descriptor":"No automated regression tests - it is all done manually."},{"score":-1,"descriptor":"The team complains that they have tried to get automated functional tests to work in the past, but they say it slows them down and is too expensive for this group to do."},{"score":-1,"descriptor":"Little to no organizational support for leadership promoting an investment in test automation."},{"score":0,"descriptor":"There is some automated testing, including some in the automated regression build."},{"score":1,"descriptor":"Automated regression tests complete in less than two hours."},{"score":1,"descriptor":"Code coverage is measured on automated functional tests."},{"score":1,"descriptor":"All of the tests are included in a CI build and there are rarely test cases commented out or ignored."},{"score":1,"descriptor":"The team values automated testing."},{"score":1,"descriptor":"Pipeline includes gating factor to ensure that important code quality metrics don't backslide"},{"score":2,"descriptor":"The team agrees that the automated tests are valuable and organize to run them in various CI builds."},{"score":2,"descriptor":"They recognize that they can't be run all of the time for each build, so they will be segregated and run at different times."},{"score":2,"descriptor":"There may be time sequences where all of the builds are not running successfully because the tests are failing."},{"score":2,"descriptor":"Sometimes they will allow a small set of tests to be commented out as they are difficult to debug/fix."},{"score":2,"descriptor":"Similar to automated unit testing, the team understands and works to have fast and reliable automated feature tests."},{"score":2,"descriptor":"A smoke test is included with the unit tests to ensure major capabilities continue to work with each check-in."},{"score":3,"descriptor":"Speed and durability are significant concerns, and the team works at writing good and fast tests."},{"score":3,"descriptor":"All the tests are allocated to a CI build to ensure they run at some times."},{"score":3,"descriptor":"The team understand that the automated tests are a real safety net and use them to strive for zero defects to production."},{"score":3,"descriptor":"Performance and other non-functional requirements are included in the tests."},{"score":3,"descriptor":"The tests are structured so that the developers run all unit tests and key functional tests (smoke tests) prior to every check-in."}]},{"section":"Source Code Management - Legacy","descriptor":"Employ modern tools to control and manage all items that constitute the application","number":-1,"entries":[{"score":-1,"descriptor":"Traditional schemes based on file-locking and time-sharing or no code repository is used."},{"score":-1,"descriptor":"Check-ins are not performed in short time-frames, leaving code unprotected and not integrated for long periods of time (greater than a couple of days)."},{"score":-1,"descriptor":"Code branches are not well understood or managed."},{"score":0,"descriptor":"The team uses a supported SCM for code and tests.."},{"score":1,"descriptor":"IDE(s) integrate with SCM."},{"score":1,"descriptor":"Developers include meaningful comments in commits."},{"score":1,"descriptor":"Build can pull code from repository."},{"score":1,"descriptor":"The team checks in at least every couple of days into the mainline trunk."},{"score":1,"descriptor":"Mainline branches are protected from inadvertent changes."},{"score":1,"descriptor":"Each team member can often merge their code with no merge problems."},{"score":2,"descriptor":"SCM supports merging; optimistic check-ins."},{"score":2,"descriptor":"Build does pull code from repository."},{"score":2,"descriptor":"Check-ins are done daily, if not several times per day."},{"score":2,"descriptor":"Team does not check in code if the build is broken, unless the check-in is to fix the build."},{"score":2,"descriptor":"Production or release branch fixes are always applied consistently to trunk."},{"score":3,"descriptor":"Commits are logically orchestrated; all development and release collateral is in SCM."},{"score":3,"descriptor":"Gated check-in's are enforced; all steps passing with improving metrics. "},{"score":3,"descriptor":"Branches are used effectively, and merges are are easily supported."}]},{"section":"Source Code Management - Microservices","descriptor":"Employ modern tools to control and manage all items that constitute the application","number":-1,"entries":[{"score":-1,"descriptor":"Traditional schemes based on file-locking and time-sharing or no code repository is used."},{"score":-1,"descriptor":"Check-ins are not performed in short time-frames, leaving code unprotected and not integrated for long periods of time (greater than a couple of days)."},{"score":-1,"descriptor":"Code branches are not well understood or managed."},{"score":0,"descriptor":"The team uses a supported SCM for code and tests.."},{"score":1,"descriptor":"IDE(s) integrate with SCM."},{"score":1,"descriptor":"Developers include meaningful comments in commits."},{"score":1,"descriptor":"Build can pull code from repository."},{"score":1,"descriptor":"The team checks in at least every couple of days into the mainline trunk."},{"score":1,"descriptor":"Mainline branches are protected from inadvertent changes."},{"score":1,"descriptor":"Each team member can often merge their code with no merge problems."},{"score":2,"descriptor":"SCM supports merging; optimistic check-ins."},{"score":2,"descriptor":"Build does pull code from repository."},{"score":2,"descriptor":"Check-ins are done daily, if not several times per day."},{"score":2,"descriptor":"Team does not check in code if the build is broken, unless the check-in is to fix the build."},{"score":3,"descriptor":"Commits are logically orchestrated; all development and release collateral is in SCM."},{"score":3,"descriptor":"Gated check-in's are enforced; all steps passing with improving metrics. "},{"score":3,"descriptor":"Branches are used effectively, and merges are are easily supported."}]}]